import{_ as s,c as n}from"./app.84c2dfda.js";const a={},t=n(`<h1 id="message-extraction" tabindex="-1"><a class="header-anchor" href="#message-extraction" aria-hidden="true">#</a> Message extraction</h1><p>To extract all the messages that you want translated from your application code, a bit of setup is required.</p><h2 id="scripts" tabindex="-1"><a class="header-anchor" href="#scripts" aria-hidden="true">#</a> Scripts</h2><p>First, add scripts to your <code>package.json</code>:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  ...
  <span class="token property">&quot;gettext:extract&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-gettext-extract&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;gettext:compile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-gettext-compile&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>npm run gettext:extract</code> extracts messages from your code and creates <code>.po</code> files.</p><p><code>npm run gettext:compile</code> compiles the translated messages from the <code>.po</code> files to a <code>.json</code> to be used in your application.</p><p>Using these scripts is <em>theoretically</em> optional if you have other means of extraction or may even want to write message files yourself.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Before running the scripts, create a file <code>gettext.config.js</code> in your application root. This is a configuration <em>only</em> for the scripts above. A minimal configuration may look like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;de&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Here are all the available configuration options and their defaults:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">,</span> <span class="token comment">// only files in this directory are considered for extraction</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/*.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/*.vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// glob patterns to select files for extraction</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// glob patterns to exclude files from extraction</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;./src/language&quot;</span><span class="token punctuation">,</span> <span class="token comment">// output path of all created files</span>
    <span class="token literal-property property">potPath</span><span class="token operator">:</span> <span class="token string">&quot;./messages.pot&quot;</span><span class="token punctuation">,</span> <span class="token comment">// relative to output.path, so by default &quot;./src/language/messages.pot&quot;</span>
    <span class="token literal-property property">jsonPath</span><span class="token operator">:</span> <span class="token string">&quot;./translations.json&quot;</span><span class="token punctuation">,</span> <span class="token comment">// relative to output.path, so by default &quot;./src/language/translations.json&quot;</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">flat</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// don&#39;t create subdirectories for locales</span>
    <span class="token literal-property property">linguas</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// create a LINGUAS file</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,13);function e(p,o){return t}var c=s(a,[["render",e]]);export{c as default};
